/**
 *                          EE 599 Final Project
 *                  Yao Guo, Yang Zhang and Weichang Wang
 *
 * A Cambricon ISA compiler which reads a low-level IR file generated by a neural
 * network program. The low-level IR is optimized by Glow compiler to perform
 * fast training process. This Cambricon compiler further compiles IR to Cambricon
 * ISA which support several useful machine learning instructions. The ISA file
 * can be apply to the Cambricon hardware to perform a hardware-accelerated
 * machine learning process.
 *
 */

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

void convertIR(string line, vector<string> &vec);
void printISA(char *outFileName, vector<string> &vec);

//  TODO: Create data structures for declared variables and their size
//  TODO: Create data structures for registers

int main(int argc, char *argv[]) {
    // Check command line arguments
    if (argc != 3) {
        cerr << "Usage: ./executable <input> <output>" << endl;
        return -1;
    }

    // Read input file
    ifstream inFile;
    inFile.open(argv[1]);
    if (!inFile) {
        cerr << "Failed to open file " << argv[1] << endl;
        return -1;
    }

    // Find the line contains the real low-level IR code
    string line;
    while (getline(inFile, line)) {
        size_t found = line.find("code {");
        if (found != string::npos)
            break;
    }
    // Can't find code part till end of file
    if (!inFile) {
        cerr << "Input file is not in a proper format" << endl;
        return -1;
    }

    // Read every line and generate ISA accordingly
    vector<string> vecISA;
    while (getline(inFile, line)) {
        if (line == "}")
            break;
        convertIR(line, vecISA);
    }
    inFile.close();
    printISA(argv[2], vecISA);

    return 0;
}

void convertIR(string line, vector<string> &vec) {
    vec.push_back(line);
}

/**
 * Print to output file specified by outFileName
 * @param outFileName
 * @param vec
 */
void printISA(char *outFileName, vector<string> &vec) {
    ofstream outFile;
    outFile.open(outFileName);
    for (auto &it : vec) {
        outFile << it << endl;
    }
    outFile.close();
}